#+TITLE: Dirvish
:properties:
#+OPTIONS: toc:nil author:nil timestamp:nil num:nil ^:nil
#+HTML_HEAD_EXTRA: <style> .figure p {text-align: left;} </style>
#+HTML_HEAD_EXTRA: <style> table, th, td {border: solid 1px; font-family: monospace;} </style>
#+HTML_HEAD_EXTRA: <style> td {padding: 5px;} </style>
#+HTML_HEAD_EXTRA: <style> th.org-right {text-align: right;} th.org-left {text-align: left;} </style>
#+startup: shrink
:end:

* General settings

#+begin_src emacs-lisp
;; (setq dirvish-attributes '(all-the-icons subtree-state file-size))

(after!
  dirvish
  (setq dirvish-attributes '(vscode-icon subtree-state file-size))
  (setq dirvish-vscode-icon-size 24) ;; Make the icons a little smaller
  (setq dired-listing-switches "--all --time-style=locale --group-directories-first --human-readable --no-group -g"))

;; Permissions problems when trying to use the mac trash based delete
(setq delete-by-moving-to-trash nil)

;; Enable emerge mode (the "grouping" functionality)
(add-hook 'dirvish-setup-hook #'dirvish-emerge-mode)

;; Required
(dirvish-override-dired-mode)
#+end_src

* Force dired-omit-files

Due to the order of loading, the Doom setting for =dired-omit-files= knock out custom settings. By reinstating them after dirvish loads, I can get around this. The =revert-buffer= makes sure the /first directory/ loaded by Dirvish refreshes so these changes are applied.

#+begin_src emacs-lisp
;; Show all files except . and ..
(add-hook-run-once 'dirvish-setup-hook
                   (lambda ()
                     (setq dired-omit-files "\\`[.]?#\\|\\`[.][.]?\\'")
                     (revert-buffer)))

#+end_src

* Enable PDF Tools

This isn't always enabled when Dirvish / Dired starts, this makes sure it is.

#+begin_src emacs-lisp
(after! dirvish
  (pdf-tools-install))
#+end_src

* Quick Access Entries

#+begin_src emacs-lisp
(setq dirvish-quick-access-entries '(("h" "~/" "Home")
                                     ("g" "~/Git_Repos" "Git Repos")
                                     ("d" "~/.config/doom" "Doom")
                                     ("t" "/tmp" "tmp")
                                     ("b" "/Volumes/OMV_Documents/Documents/Boardgames" "Boardgames")
                                     ("v" "/Volumes")
                                     ("o" "~/org-mode")))
#+end_src

* Set Dirvish Emerge settings (e.g. the "grouping" functionality)

#+begin_src emacs-lisp
(setq dirvish-emerge-groups '(
  ("Directories" (predicate . directories))
  ("Recent files" (predicate . recent-files-2h))
  ("Documents" (extensions "pdf" "tex" "bib" "epub" "txt" "afpub"))
  ("Video" (extensions "mp4" "mkv" "webm"))
  ("Pictures" (extensions "jpg" "png" "svg" "gif"))
  ("Audio" (extensions "mp3" "flac" "wav" "ape" "aac"))
  ("Archives" (extensions "gz" "rar" "zip" "tar" "7z"))))
#+end_src

* Utility Functions

#+begin_src emacs-lisp
(defun kill-dirvish ()
  (interactive)
  (progn
    (dirvish-quit)
    (+dired/quit-all)))

(defun delete-dirvish-cache-directory ()
   "Delete the dirvish cache directory."
   (interactive)
   (if (file-directory-p dirvish-cache-dir)
     (progn (delete-directory dirvish-cache-dir t)
            (message "Deleted dirvish cache directory: %s" dirvish-cache-dir))
     (message "Dirvish cache directory not found: %s" dirvish-cache-dir)))
#+end_src

* Kill Dirvish once I select a file

This checks if =find-file= is being called on a directory or a file. It "loosely" does this, basically if it's not a directory, it assumes it's a file. If its a file, after doing its find-file action, it kills all dired.

#+begin_src emacs-lisp
(advice-add #'dired-find-file
            :around
            (lambda (f &rest r)
                    (let ((is-file (not (file-directory-p
                                          (dired-get-file-for-visit)))))
                         (apply f r)
                         (when is-file (+dired/quit-all)))))
#+end_src


* Key Maps

#+begin_src emacs-lisp
(map! :desc "Open dirvish"
      :leader "." #'dirvish)

(map! :map dirvish-mode-map
      :desc "Perform fd search"
      :nvi "/" #'dirvish-fd
      :desc "Live narrowing"
      :nvi "n" #'dirvish-narrow
      :desc "Sort current buffer"
      :nvi "s" #'dirvish-quicksort
      :desc "Get file information"
      :nvi "i" #'dirvish-file-info-menu
      :desc "dired find file"
      :nvi "C-l" #'dired-find-file
      :desc "dired find file"
      :nvi "l" #'dired-find-file
      :desc "dired up directory"
      :nvi "C-h" #'dired-up-directory
      :desc "dired up directory"
      :nvi "h" #'dired-up-directory
      :desc "Dirvish previous group"
      :nvi "C-k" #'dirvish-emerge-previous-group
      :desc "dired previous line"
      :nvi "k" #'dired-previous-line
      :desc "Dirvish next group"
      :nvi "C-j" #'dirvish-emerge-next-group
      :desc "dired next line"
      :nvi "j" #'dired-next-line
      :desc "Dirvish Dispatch"
      :nvi "?" #'dirvish-dispatch
      :nvi "g" #'revert-buffer
      :desc "Quick Access"
      :nvi "a" #'dirvish-quick-access
      :desc "Kill Dirvish"
      :nvi "q" #'kill-dirvish
      :desc "Kill Dirvish"
      :nvi "<escape>" #'kill-dirvish
      :desc "Dirvish Toggle emerge Group"
      :nvi "<tab>" (general-key "C-I"))

;; (general-auto-unbind-keys)

;; (general-define-key :keymaps 'dirvish-mode-map :states '(normal visual insert) "<tab>" (general-key "C-I"))

#+end_src
