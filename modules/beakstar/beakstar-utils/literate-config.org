#+TITLE: Beakstar Utilities
:properties:
#+OPTIONS: toc:nil author:nil timestamp:nil num:nil ^:nil
#+HTML_HEAD_EXTRA: <style> .figure p {text-align: left;} </style>
#+HTML_HEAD_EXTRA: <style> table, th, td {border: solid 1px; font-family: monospace;} </style>
#+HTML_HEAD_EXTRA: <style> td {padding: 5px;} </style>
#+HTML_HEAD_EXTRA: <style> th.org-right {text-align: right;} th.org-left {text-align: left;} </style>
#+startup: shrink
:end:

* Curl

#+begin_src emacs-lisp
(defun curl (&optional start end)
  "runs system curl command on selection or user input and inserts
the results in the buffer."
  (interactive "r")
  (let ((url (if (use-region-p) (buffer-substring-no-properties start end)
               (read-string "url: "))))
    (ignore-errors
      (deactivate-mark))
    (end-of-line)
    (insert (concat "\n" (s-replace-regexp "" "" (shell-command-to-string (concat "curl -s -i '" url "'")))))
    (beginning-of-line)))
#+end_src

* Miscelaneous Stuff

#+begin_src emacs-lisp
(defun occur-from-search ()
  "Runs occur on the regex used in the last '/' search. This is useful for capturing
all the matches (just the matches, not the whole lines) into the occur buffer so
you can do something with them.

Note: Assumes evil search, so you may need to tweak for your needs."
  (interactive)
  (let ((search-pattern evil-ex-search-pattern))
    (if search-pattern (let ((capture-type (if (zerop (regexp-opt-depth (nth 0 search-pattern))) "\\&"
                                             "\\1")))
                         (occur (nth 0 search-pattern) capture-type)
                         (other-window 1))
      (message "First search with '/'."))))


(defun what-face (pos)
  "Print info about the face at point."
  (interactive "d")
  (let ((face (or (get-char-property (point)
                                     'read-face-name)
                  (get-char-property (point)
                                     'face))))
    (if face
        (let ((text-properties (prin1-to-string (plist-get (text-properties-at (point))
                                                           'face))))
          (message "Face: %s Text Properties: %s" face
                   text-properties))
      (message "No face at %d" pos))))

(defun evil-buffer-new-window ()
  (interactive)
  (make-frame '((width . 160)
                (height . 50)))
  (evil-buffer-new 0 nil))

(defun save-new-file (f)
  "Create a new file and open it."
  (interactive "FFilename: ")
  (with-temp-buffer (write-file f t))
  (find-file f))

(defun with-universal-arg (f)
  "Run function with universal arg"
  (setq current-prefix-arg '(4)) ;; Strangely "4" is the universal arg. Should have been "42" lol
  (call-interactively f))
#+end_src

* Formatting utilities

#+begin_src emacs-lisp
(defun format-elisp ()
  "Format the selected region as emacs-lisp code."
  (interactive)
    (if (region-active-p)
        (let ((str (buffer-substring (region-beginning) (region-end))))
          (delete-region (region-beginning) (region-end))
          (pp-emacs-lisp-code (read str))))
      (message "No active region."))
#+end_src

* JWT utilties

#+begin_src emacs-lisp
(defun add-base64-padding (base64-str)
  "Add padding to base64 encoded string if necessary."
  (let* ((remainder (% (length base64-str) 4))
         (padding-length (cond ((= remainder 2) 2)
                               ((= remainder 3) 1)
                               (t 0))))
    (concat base64-str (make-string padding-length ?=))))

(defun decode-jwt (jwt)
  "Decode JWT token using the json.el library."
  (require 'json)
  (let* ((jwt-parts (split-string jwt "\\." t))
         (header (json-read-from-string (base64-decode-string (add-base64-padding (nth 0 jwt-parts)))))
         (payload (json-read-from-string (base64-decode-string (add-base64-padding (nth 1 jwt-parts)))))
         (decoded-jwt (concat (json-encode header)
                              "."
                              (json-encode payload)
                              "."
                              (nth 2 jwt-parts))))
    (concat (with-temp-buffer
              (insert (json-encode header))
              (json-pretty-print-buffer)
              (buffer-string))
            "\n"
            (with-temp-buffer
              (insert (json-encode payload))
              (json-pretty-print-buffer)
              (buffer-string))
            "\n")))

(defun decode-jwt-token (begin end)
  "Decode JWT token in the region from BEGIN to END and replace it with decoded token."
  (interactive "r")
  (let ((jwt (buffer-substring-no-properties begin end)))
    (delete-region begin end)
    (insert (decode-jwt jwt))))

(defun base64-decode-region-padding (begin end)
  "Add any missing padding to the base64 string, then decode it."
  (interactive "r")
  (let ((s (buffer-substring-no-properties begin end)))
    (delete-region begin end)
    (insert (base64-decode-string (add-base64-padding s)))))
#+end_src

* Pearpop Utilities

** Pay Creators

#+begin_src emacs-lisp
(after! term-toggle
  (defun pearpop-payout ()
    (interactive)
    (term-toggle-ansi)
    (term-send-raw-string (concat "pearpop-payout \n"))))
#+end_src

* Purge recent files list

#+begin_src emacs-lisp
(defun purge-recent-files ()
  "Wipe the recent files list."
  (interactive)
  (setq recentf-list nil))
#+end_src

* Insert Zero Width Space

Just to make this a bit faster. Manly for breaking the interpretation of special characters in org-mode.

#+begin_src emacs-lisp
(defun insert-zero-width-space ()
  "Inserts a Unicode zero-width space character."
  (interactive)
  (insert "\u200B"))
#+end_src

* Reset font scale

Note this is currently hard-coded to a font height of 140, which is what I'm using. So this would need to change if I wanted a different height.

You can see the current height with =(face-attribute 'default :height)=.
#+begin_src emacs-lisp
(defun reset-font-scale ()
  (interactive)
  (set-face-attribute 'default nil :height 140)
  (text-scale-set 0)
  (text-scale-mode 0))
#+end_src

* Move sexp

Seen [[http://yummymelon.com/devnull/moving-text-elegantly-in-emacs.html][here]].

#+begin_src emacs-lisp
(defun cc/move-sexp-backward ()
  "Move balanced expression (sexp) to the right of point backward one sexp.
Point must be at the beginning of balanced expression (sexp)."
  (interactive)
  (transpose-sexps 1)
  (forward-sexp -2))

(defun cc/move-sexp-forward ()
  "Move balanced expression (sexp) to the right of point forward one sexp.
Point must be at the beginning of balanced expression (sexp)."
  (interactive)
  (forward-sexp 1)
  (transpose-sexps 1)
  (forward-sexp -1))
#+end_src

* UUIDs

I didn't do the math on exactly what's going on here bitwise myself. I'm nearly certain that it generates spec compliant V4 UUIDs. However, it seems to always have a '4' in the /second/ position of the 3rd "stanza" and that shouldn't be restricted. So I should revisit this at some point so it's more fully random.

[[https://www.cryptosys.net/pki/uuid-rfc4122.html][Here]] is the full, correct algorithm in English.

#+begin_src emacs-lisp
(defun insert-v4-uuids (num-uuids)
  "Generate a number of V4 UUIDs adhering to the V4 specification and insert them into the current buffer, one per line."
  (interactive "nHow many UUIDs to generate? ")
  (dotimes (_ num-uuids)
    (let ((uuid (format "%04x%04x-%04x-4%03x-%04x-%04x%04x%04x"
                        (random (expt 16 4)) (random (expt 16 4))
                        (random (expt 16 4))
                        (logior (logand (random (expt 16 4)) #x0fff) #x4000)
                        (logior (logand (random (expt 16 4)) #x3fff) #x8000)
                        (random (expt 16 4)) (random (expt 16 4)) (random (expt 16 4)))))
      (insert (concat uuid "\n")))))
#+end_src

* JSDocs

Right now the only decent jsdoc package only works with in js-ts-mode (tree sitter). I prefer rjsx-mode for javascript editing. So I'll wrap the function to temporarily switch modes and do the docs.

#+begin_src emacs-lisp
(defun switch-mode-and-jsdoc (f &rest r)
  (let ((initial-mode major-mode))
   (js-ts-mode)
   (let ((return (apply f r))) ;; Save the return so we can return whatever
     (funcall initial-mode)
     return)))

(advice-add 'jsdoc :around #'switch-mode-and-jsdoc)

#+end_src

* Buffer names I care less about

This is used in the switching buffers hydra and also mod-ivy to filter the buffer list.

#+begin_src emacs-lisp
(defvar less-important-buffer-names
        '("*Async-native-compile-log*"
          "*clojure-lsp*"
          "*clojure-lsp::stderr*"
          "*Compile-Log*"
          "*copilot events*"
          "*dap-ui.*"
          "*lsp-"
          "*magit-process:"
          "*Messages*"
          "*Native-compile-Log*"
          ;; "*new*"
          "*Pp Eval Output*"
          "*pyright.*"
          "*Python ::"
          "*scratch*"
          "*ts-ls*"
          "*ts-ls::stderr*"
          "*zprint-mode errors*"
          "*semgrep-"
          "*ruff*")
        "Less important buffer names")
#+end_src

* Filter strings

#+begin_src emacs-lisp
(defun filter-strings-by-regex (strings regex-list)
  "Filter out items in a list of strings based on a list of regex patterns."
  (cl-remove-if (lambda (string)
                        (seq-some (lambda (regex) (string-match-p regex string))
                                  regex-list))
                strings))
#+end_src

* Advice around next-buffer and previous-buffer to only switch to important buffers

Note that buffers beginning with a space " " are also filtered out (these are system buffers).

#+begin_src emacs-lisp
(defun important-buffer-count ()
       (length (filter-strings-by-regex
                 (seq-filter (lambda (name) (not (string-prefix-p " " name)))
                             (mapcar 'buffer-name (buffer-list)))
                 less-important-buffer-names)))

(advice-add #'next-buffer :around
            (lambda (f &rest r)
                    (when (> (important-buffer-count) 1) (apply f r))))

(advice-add #'previous-buffer :around
            (lambda (f &rest r)
                    (when (> (important-buffer-count) 1) (apply f r))))
#+end_src

* Visidata command

This was tricky to get working because opening a terminal and then running a command in that terminal requires Apple events controlling other applications. This relies on an "app" created with the AppleScript tool. The app then requested the needed access, which I approved. I couldn't get the permissions to work with just a script and the =osascript= command.

#+begin_src emacs-lisp
(defun visidata-on-file ()
  "Run visidata on the file currently highlighted in dired or the file currently visited in the buffer."
  (interactive)
  (let*
    ((filename (if (eq major-mode 'dired-mode)
                 (dired-get-file-for-visit)
                 (buffer-file-name)))
      (file (if (tramp-tramp-file-p filename)
              (tramp-handle-file-local-copy filename)
              filename)))
    (if file
      (let ((command
              (format
                "open -a /Users/mtwomey/scripts/visidata-terminal.app %s"
                (shell-quote-argument file))))
           (message command)
           (save-excursion (set-buffer "*scratch*") (shell-command command)))
      (message "No file selected"))))
#+end_src

* Random functions

#+begin_src emacs-lisp
(defun capitalize-words-in-region (start end)
  "Capitalize the first letter of every word in the selected region."
  (interactive "r")
  (save-excursion
    (goto-char start)
    (while (< (point) end)
      (let ((word-start (point)))
        (forward-word)
        (capitalize-region word-start (point))))))
#+end_src

#+begin_src emacs-lisp
(defun insert-number-range (start end)
  "Insert a range of numbers from START to END, one per line.
If END is less than START, the numbers will be in descending order.
Numbers are inserted at the current column on each line,
inserting into existing text if present, or creating new lines as needed."
  (interactive "nStart number: \nnEnd number: ")
  (let ((current start)
        (step (if (<= start end) 1 -1))
        (column (current-column))
        (last-line (line-number-at-pos (point-max))))
    (while (if (> step 0)
               (<= current end)
             (>= current end))
      (move-to-column column t)
      (insert (number-to-string current))
      (setq current (+ current step))
      (when (/= current (if (> step 0) (1+ end) (1- end)))
        (if (= (line-number-at-pos) last-line)
            (progn
              (insert "\n")
              (setq last-line (1+ last-line)))
          (forward-line 1))))))
#+end_src

#+begin_src emacs-lisp
(defun seq-shuffle (sequence)
  "Unrolled version of seq-sort-by"
  (seq-map 'cdr
           (sort (seq-map (lambda (x) (cons (random) x)) sequence)
                 (lambda (a b)
                   (<= (car a) (car b))))))
#+end_src

#+begin_src emacs-lisp
(defun randomize-lines (start end)
  "Randomize the lines in the region between START and END."
  (interactive "r")
  (if (use-region-p)
      (let ((lines (split-string (buffer-substring start end) "\n" t))
            (inhibit-modification-hooks t))
        (delete-region start end)
        (dolist (line (seq-shuffle lines))
          (insert line "\n"))
        (when (and (> end start)
                   (= (char-before end) ?\n))
          (delete-char -1)))
    (message "No region selected. Please select a region first.")))
#+end_src

#+begin_src emacs-lisp
(defun diagnose-pyright-conda-issue ()
  "Diagnose why Pyright isn't finding conda packages."
  (interactive)
  (message "=== DIAGNOSING PYRIGHT + CONDA ISSUE ===")

  ;; Check current environment
  (message "\n--- ENVIRONMENT STATUS ---")
  (message "CONDA_DEFAULT_ENV: %s" (getenv "CONDA_DEFAULT_ENV"))
  (message "CONDA_PREFIX: %s" (getenv "CONDA_PREFIX"))
  (message "VIRTUAL_ENV: %s" (getenv "VIRTUAL_ENV"))
  (message "PATH: %s" (getenv "PATH"))

  ;; Check conda-env.el status
  (message "\n--- CONDA-ENV.EL STATUS ---")
  (message "conda-env-current-name: %s"
           (if (boundp 'conda-env-current-name) conda-env-current-name "not set"))
  (message "conda-env-current-path: %s"
           (if (boundp 'conda-env-current-path) conda-env-current-path "not set"))

  ;; Check LSP settings
  (message "\n--- LSP PYRIGHT SETTINGS ---")
  (message "lsp-pyright-python-executable-cmd: %s"
           (if (boundp 'lsp-pyright-python-executable-cmd) lsp-pyright-python-executable-cmd "not set"))
  (message "lsp-pyright-venv-path: %s"
           (if (boundp 'lsp-pyright-venv-path) lsp-pyright-venv-path "not set"))

  ;; Check Python executable
  (message "\n--- PYTHON EXECUTABLE ---")
  (let ((python-cmd (executable-find "python"))
        (python3-cmd (executable-find "python3")))
    (message "which python: %s" python-cmd)
    (message "which python3: %s" python3-cmd)

    (when python-cmd
      (let ((python-version (shell-command-to-string (format "%s --version" python-cmd))))
        (message "python version: %s" (string-trim python-version))))

    (when python-cmd
      (let ((python-packages (shell-command-to-string (format "%s -m pip list 2>/dev/null | head -10" python-cmd))))
        (message "sample packages:\n%s" python-packages))))

  ;; Check project configuration
  (message "\n--- PROJECT CONFIGURATION ---")
  (let ((project-root (or (and (fboundp 'projectile-project-root)
                               (projectile-project-root))
                          default-directory)))
    (message "Project root: %s" project-root)
    (message "pyrightconfig.json exists: %s"
             (file-exists-p (expand-file-name "pyrightconfig.json" project-root)))
    (message "pyproject.toml exists: %s"
             (file-exists-p (expand-file-name "pyproject.toml" project-root)))
    (message ".venv exists: %s"
             (file-exists-p (expand-file-name ".venv" project-root))))

  (message "\n=== END DIAGNOSIS ==="))
#+end_src


* Provide beakstar-utils

#+begin_src emacs-lisp
(provide 'beakstar-utils)
#+end_src
