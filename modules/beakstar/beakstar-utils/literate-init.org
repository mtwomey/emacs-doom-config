#+TITLE: Beakstar Utilities (init.el)
:properties:
#+OPTIONS: toc:nil author:nil timestamp:nil num:nil ^:nil
#+HTML_HEAD_EXTRA: <style> .figure p {text-align: left;} </style>
#+HTML_HEAD_EXTRA: <style> table, th, td {border: solid 1px; font-family: monospace;} </style>
#+HTML_HEAD_EXTRA: <style> td {padding: 5px;} </style>
#+HTML_HEAD_EXTRA: <style> th.org-right {text-align: right;} th.org-left {text-align: left;} </style>
#+startup: shrink
:end:

Things that should load early before anything else. Core utility functions.

* this-directory

#+begin_src emacs-lisp
(defun this-directory ()
  (file-name-directory (or load-file-name buffer-file-name)))
#+end_src

* Do things using a specific directory

This is actually my first real macro!

#+begin_src emacs-lisp
(defmacro with-current-directory (directory &rest body)
  "Execute body setting the default directory and load-path."
  `(let ((load-path (cons ,directory load-path))
         (default-directory ,directory))
     ,@body))
#+end_src

* Run a hook a single time then delete it

#+begin_src emacs-lisp
(defmacro add-hook-run-once (hook func)
  "This takes a hook and a body. It defines a function and adds it to the hook
using add-hook. The function will run the body and then remove itself from the
hook with remove-hook. Finally the funciton will undefine itself with fmakunbound.
This has the effect of a hook function that will run only one time"
  (let ((unique-func-name (gensym "f")))
       `(progn (defun ,unique-func-name ()
                      (funcall ,func)
                      (remove-hook ,hook ',unique-func-name)
                      (fmakunbound ',unique-func-name))
               (add-hook ,hook ',unique-func-name))))
#+end_src
